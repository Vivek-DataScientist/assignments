install.packages("plotly")
#copy datas to another variable
stat1<-stat
#import dataset
stat<-read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\50_Startups.csv")
#copy datas to another variable
stat1<-stat
stat1$State<-as.numeric(stat1$State)
attach(stat1)
View(stat)
View(stat1)
View(stat)
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
stat_norm <- as.data.frame(lapply(stat1, normalize))
summary(stat_norm)
summary(stat_norm)
#Split datas to train and test datas
stat_train=stat_norm[1:40,]
stat_test=stat_norm[41:50,]
#import neuralnetwork
library(neuralnet)
model_stat=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train)
#model prepared by neural net method
model_stat=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train)
plot(model_stat)
#the plot function which tells weight associated with each variable
#resulting the model with model and test datas
result_model<-compute(model_stat,stat_test)
str(result_model)
pre_stre<-result_model$net.result
cor(pre_stre,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 17)
plot(model_stat2)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 16)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test)
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
View(stat_test)
#import dataset
stat<-read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\50_Startups.csv")
#copy datas to another variable
stat1<-stat
#change to numerical datas
stat1$State<-as.numeric(stat1$State)
attach(stat1)
#normalising all column values
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
stat_norm <- as.data.frame(lapply(stat1, normalize))
summary(stat_norm)
#Split datas to train and test datas
stat_train=stat_norm[1:40,]
stat_test=stat_norm[41:50,]
#import neuralnetwork
library(neuralnet)
#model prepared by neural net method for train data
model_stat=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train)
#plot the model
plot(model_stat)
#the plot function which tells weight associated with each variable
#resulting the model with model and test datas
result_model<-compute(model_stat,stat_test)
str(result_model)
pre_stre<-result_model$net.result
cor(pre_stre,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 16)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test)
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
##### Neural Networks -------------------
# Load the Concrete data as concrete
concrete = read.csv(file.choose())
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# apply normalization to entire data frame
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm)
View(concrete_norm)
# create training and test data
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
## Training a model on the data ----
# train the neuralnet model
library(neuralnet)
# simple ANN with only a single hidden neuron
concrete_model <- neuralnet(formula = strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train)
# visualize the network topology
plot(concrete_model)
----
# obtain model results
results_model <- compute(concrete_model, concrete_test)
----
# obtain model results
results_model <- compute(concrete_model, concrete_test)
----
# obtain model results
results_model <- compute(concrete_model, concrete_test)
results_model <- compute(concrete_model, concrete_test)
# obtain predicted strength values
str(results_model)
predicted_strength <- results_model$net.result
# examine the correlation between predicted and actual values
cor(predicted_strength, concrete_test$strength)
#0.8063
## Improving model performance ----
# a more complex neural network topology with 5 hidden neurons
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 10)
# plot the network
plot(concrete_model2)
View(concrete_test)
# evaluate the results as we did before
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)#0.9278091
#import dataset
stat<-read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\50_Startups.csv")
#copy datas to another variable
stat1<-stat
#change to numerical datas
stat1$State<-as.numeric(stat1$State)
attach(stat1)
#normalising all column values
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
stat_norm <- as.data.frame(lapply(stat1, normalize))
summary(stat_norm)
#Split datas to train and test datas
stat_train=stat_norm[1:40,]
stat_test=stat_norm[41:50,]
#import neuralnetwork
library(neuralnet)
#model prepared by neural net method for train data
model_stat=neuralnet(formula=Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train)
#plot the model
plot(model_stat)
#the plot function which tells weight associated with each variable
#resulting the model with model and test datas
result_model<-compute(model_stat,stat_test)
View(stat_test)
#the plot function which tells weight associated with each variable
#resulting the model with model and test datas
result_model<-compute(model_stat,stat_test[1:4])
str(result_model)
pre_stre<-result_model$net.result
cor(pre_stre,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 16)
plot(model_stat2)
str(result_model2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test[1:4])
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 17)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test[1:4])
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 15)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test[1:4])
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 16)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test[1:4])
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
######Improve Model with many hidden values#######
model_stat2=neuralnet(Profit~R.D.Spend+Marketing.Spend+Administration+State,data=stat_train,hidden = 10)
plot(model_stat2)
#plot the model with hidden layers
#Resulting the model with improved model with test datas
result_model2<-compute(model_stat2,stat_test[1:4])
str(result_model2)
pre_stre2<-result_model2$net.result
cor(pre_stre2,stat_test$Profit)
#load the concrete data
concrete = read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\concrete.csv")
#normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# apply normalization to entire data frame
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm)
# Split training and test data
concrete_train <- concrete_norm[1:773, ]
concrete_test <- concrete_norm[774:1030, ]
## Training a model on the data ----
# train the neuralnet model
library(neuralnet)
# simple ANN with only a single hidden neuron
concrete_model <- neuralnet(formula = strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train)
# visualize the network topology
plot(concrete_model)
## Evaluating model performance
# obtain model results
results_model <- compute(concrete_model, concrete_test[1:8])
# obtain predicted strength values
str(results_model)
predicted_strength <- results_model$net.result
# correlation between predicted strength and test strength
cor(predicted_strength, concrete_test$strength)
#0.8063
## Improving model performance with hidden layers##
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 10)
# plot the model
plot(concrete_model2)
#model results after providing hidden layers
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)#0.9278091
#0.8063
## Improving model performance with hidden layers##
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 15)
# plot the model
plot(concrete_model2)
#model results after providing hidden layers
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)#0.9278091/10 hidden
#0.8063
## Improving model performance with hidden layers##
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 10)
#model results after providing hidden layers
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)#0.9278091/10 hidden
#0.8063
## Improving model performance with hidden layers##
concrete_model2 <- neuralnet(strength ~ cement + slag +
ash + water + superplastic +
coarseagg + fineagg + age,
data = concrete_train, hidden = 15)
#model results after providing hidden layers
model_results2 <- compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <- model_results2$net.result
cor(predicted_strength2, concrete_test$strength)#0.947/10 hidden
# custom normalization function
# i take 3rd column to 31st column
forest1<-forest[3:31]
#read a dataset
forest<-read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\forestfires.csv")
# custom normalization function
# i take 3rd column to 31st column
forest1<-forest[3:31]
#change to numeric data
forest1$size_category<-as.numeric(forest1$size_category)
attach(forest1)
#cat to numerical small as 2 large as 1
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# apply normalization to entire data frame
forest_norm <- as.data.frame(lapply(forest1, normalize))
summary(forest_norm)
# create training and test data
forest_train <- forest_norm[1:400, ]
forest_test <- forest_norm[401:517, ]
# model prepared by neuralnet method with train datas
forest_model <- neuralnet(size_category ~ FFMC+DMC+DC+ISI+temp+RH+wind+rain+area+dayfri+daymon+daysat+
daysun+daythu+daytue+daywed+monthapr+monthaug+monthdec+monthfeb+monthjan+
monthjul+monthjun+monthmar+monthmay+monthnov+monthoct+monthsep,
data=forest_train)
plot(forest_model)
View(forest_test)
results_model <- compute(forest_model, forest_test[,1:28])
predicted_strength <- results_model$net.result #predict model with output of summarised model
# correlation between predicted strength and test strength
cor(predicted_strength, forest_test$size_category)
## Improving model performance with hidden neurons
forest_model2 <- neuralnet(size_category ~ FFMC+DMC+DC+ISI+temp+RH+wind+rain+area+dayfri+daymon+daysat+
daysun+daythu+daytue+daywed+monthapr+monthaug+monthdec+monthfeb+monthjan+
monthjul+monthjun+monthmar+monthmay+monthnov+monthoct+monthsep,
data=forest_train,hidden=10)
plot(forest_model2)
## Evaluating model performance
# obtain model results
results_model2 <- compute(forest_model2, forest_test[,1:28])
str(results_model2)
predicted_strength2 <- results_model2$net.result
cor(predicted_strength2, forest_test$size_category)
## Improving model performance with hidden neurons
forest_model2 <- neuralnet(size_category ~ FFMC+DMC+DC+ISI+temp+RH+wind+rain+area+dayfri+daymon+daysat+
daysun+daythu+daytue+daywed+monthapr+monthaug+monthdec+monthfeb+monthjan+
monthjul+monthjun+monthmar+monthmay+monthnov+monthoct+monthsep,
data=forest_train,hidden=15)
plot(forest_model2)
## Evaluating model performance
# obtain model results
results_model2 <- compute(forest_model2, forest_test[,1:28])
predicted_strength2 <- results_model2$net.result
cor(predicted_strength2, forest_test$size_category)
#import dataset
stat<-read.csv("C:\\Users\\jeeva\\Downloads\\R assignment\\Neural Netwrk\\50_Startups.csv")
View(stat)
